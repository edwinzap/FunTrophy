@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@page "/resultats/parcours"
@layout UserLayout

<PageTitle>Résultats par parcours</PageTitle>

<div class="d-flex flex-row sticky-top">
    <div class="d-flex m-auto">
        <div class="p-2">
            <button class="btn" @onclick="() => ChangeTrack(-1)"><i class="fas fa-chevron-left"></i></button>
        </div>

        <div class="p-2">
            <select class="form-select" value="@SelectedTrackId" @onchange="OnSelectedTrackChanged">
                @if (Tracks is null)
                {
                    <option>Chargement...</option>
                }
                else
                {
                    @foreach (var track in Tracks)
                    {
                        <option value="@track.Id" @key="@track">@track.Name</option>
                    }
                }
            </select>
        </div>
        <div class="p-2">
            <button class="btn" @onclick="() => ChangeTrack(1)"><i class="fas fa-chevron-right"></i></button>
        </div>
    </div>
    <div class="d-flex float-end">
        @if (ShouldAutoRotate)
        {
            <div class="d-flex align-items-center">
                <span class="fas fa-arrows-rotate text-secondary fa-spin"></span>
            </div>
        }
        <div class="p-2">
            <button class="btn btn-lg fas fa-sliders" @onclick="ShowSettingsDialog"></button>
        </div>
    </div>
</div>

<div class="mt-2 mx-lg-3 d-flex flex-column flex-md-wrap flex-nowrap gap-2" id="result-list">
    @if (Results is null)
    {
        <div class="d-flex p-5 justify-content-center">
            <div class="spinner-border" role="status" />
        </div>
    }
    else if (!Results.Any())
    {
        <span class="m-auto p-2">Aucun résultat à afficher</span>
    }
    else
    {
        @foreach (var result in Results)
        {
            var index = Results.IndexOf(result) + 1;
            <a href="/resultats/equipe/@result.Team.Id" class="link-unstyled result-item">
                <div class="p-2 d-flex gap-2 align-items-center border">
                    <div class="px-1 team-number">
                        @if (result.LapDuration.HasValue)
                        {
                            @index
                            <sup>@(HtmlHelper.GetRankSup(index))</sup>
                        }
                        else
                        {
                            <span>?</span>
                        }
                    </div>
                    
                    <div class="team-color" style="border-color:@result.Team.Color.Code">
                        <span class="@(HtmlHelper.GetFaIcon(result.Team.Type))"></span>
                    </div>
                   
                    <div class="flex-fill text-nowrap team-name">
                        @(result.Team.Name.Length > 25? result.Team.Name.Substring(0, 25) + "..." : result.Team.Name)
                    </div>

                    <div class="pe-2">
                        @if (result.LapDuration.HasValue)
                        {
                            @result.LapDuration.Value.ToTimeString()
                        }
                        else
                        {
                            @*<span class="fas fa-running fa-beat" style="--fa-animation-duration: 2s; --fa-beat-scale: 1.4;"></span>*@
                            <span class="fas fa-spinner fa-spin-pulse fa-lg"></span>
                        }
                    </div>
                </div>
            </a>
        }
    }
</div>

<EditDialog @ref="SettingsDialog"
            Title="Paramètres"
            OkButtonText="Fermer"
            ShowCancelButton="false">
    <div class="d-flex flex-column">
        <div class="p-2">
            <TeamTypeFilterRadios IsInline=true
                                  SelectedFilter=TeamTypeFilter
                                  OnFilterChanged=OnTeamTypeFilterChanged />

        </div>
        <div class="p-2">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="autoRotate" @bind-value="@ShouldAutoRotate" checked="@ShouldAutoRotate">
                <label class="form-check-label" for="autoRotate">Rotation automatique</label>
            </div>
            <div class="row">
                <div class="col-auto">
                    <label class="form-label" for="rotation-interval">Interval (en secondes)</label>
                </div>
                <div class="col-auto">
                    <input class="form-control form-control-sm" type="number" id="rotation-interval" min=1 @bind-value="@RotationInterval" />
                </div>
            </div>
        </div>
    </div>
</EditDialog>