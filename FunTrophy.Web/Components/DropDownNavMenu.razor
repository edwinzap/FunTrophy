<ClickOutsideContainer OnClickOutside="CloseMenu">
    <li class="nav-item dropdown @Class">
        <a class="nav-link dropdown-toggle" @onclick="Toggle">@Title</a>
        @if (Items is not null && Items.Any(x => x.IsVisible))
        {
            <ul class="dropdown-menu dropdown-menu-end @MenuCssClass">
                @foreach (var item in Items)
                {
                    @if (item.IsVisible)
                    {
                        <li>
                            <NavLink class="dropdown-item" href="@item.Link" @onclick="CloseMenu">@item.Title</NavLink>
                        </li>
                    }
                }
            </ul>
        }
    </li>
</ClickOutsideContainer>

@code {
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public List<DropDownMenuItem>? Items { get; set; }

    [Parameter, EditorRequired]
    public string Title { get; set; }

    private bool expandDropdown = false;
    private string? MenuCssClass => expandDropdown ? "show" : null;

    private void CloseMenu()
    {
        if (expandDropdown)
        {
            expandDropdown = false;
            StateHasChanged();
        }
    }

    private void Toggle()
    {
        expandDropdown = !expandDropdown;
    }
}
